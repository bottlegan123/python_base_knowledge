# 字典创建通讯录
""""
比如有两个列表 noun = ["机会成本", "失业率"]
explanation = ["opportunity cost", "unemployment"]
我们想知道中文经济学名词对应的英文写法：
我们可以对应知道那个名词的英文写法是什么，但是如果列表太长，眼神不太好对应错了，这个时候很麻烦
那怎么办呢？
字典正好可以帮我吗实现两个变量的对应
"""

"""
字典中键值对，键是用来查找值的就好像字典中用偏旁部首查找。
字典是可变的，但是字典中的键是不变的；
可变的有列表和字典，不可变的是各种数据类型(str,int,float,bool)以及元组(tuple)
"""

# 键:值，键是冒号左边的全部包括引号，值是冒号右边的全部
contacts = {"小明": "15526377712",  # 字典用大括号表示，键与值之间用冒号连接，不同键值对中逗号分割
            "小光": "12456798765"}

print(contacts["小明"])  # 找某个键所对应的值
contacts["小红"] = "16787652367"  # 在字典中添加 键:值 对
print(contacts)

contacts["小红"] = "12676548973"  # 如果键在字典里面本来就有那么这会改变原来的值

del contacts["小红"]  # 删除字典中的一个键以及值，首先会确认这个键是否在字典中，如果不在字典中会报错
# 字典里面不可以用索引来删除

print("小明" in contacts)  # 看键是否已经在字典里，括号里面为一判断语句，真则输出True否则输出False
print(len(contacts))  # 字典长度
# 要是有多个小明但是他们年龄不同我们可以通过姓名以及年龄来区分那要怎么做呢？
"""
contacts1 = {["小明", 23]: "16776543789",  # 这里会报错因为键使用了可变的变量类型
             ["小明", 24]: "16273698736"}
print(contacts1)
"""

# 元组("小明", 23)是不可变得能解决上面的问题
contacts2 = {("小明", 23): "16776543789",
             ("小明", 24): "16273698736"}
print(contacts2)
print(("小明", 23) in contacts2)

# 创建一个知识查询字典
knowledge = {"供需关系": "市场中买方愿意购买的产品和服务的数量（需求）和买房愿意出售的产品和服务的数量（供给）之间的关系。",
             "通货膨胀": "物价水平普遍上涨的一种现象，货币购买力下降；通货膨胀是由于货币增长速度超过产出增长速度造成。",
             "失业率": "劳动力市场上正在寻找工作但是暂时找不到工作的人数站总劳动力数的比。",
             "机会成本": "在做出某种选择时，放弃了所能得到的最有利可行的替代选择所付出的代价。机会成本提醒人们在资源有限的情况下做出理性决策的重要性。"
             }
knowledge["国内生产总值"] = "一个地区或者国家在一定时期内所生产的最终产品和服务的市场价值的总和。"
knowledge["边际效用"] = "边际效用是指消费者从消费每单位产品或服务获得的额外满足感或效用。"
print(knowledge)

# 结合input、字典、if判断做一个知识查找的电子词典
query = input("输入您想查询的词语：")  # input输入的是字符串
if query in knowledge:
    print("您查询的词语" + query + "含义如下：")
    print(knowledge[query])
else:
    print("您查询的词语暂时未收录到词典中。")
    print("当前收入词条数目为" + str(len(knowledge)) + "条。")  # str可以把其他类型数据转化为字符串
# print("当前收入词条数目为" + "str("len(knowledge)") 这里可不能用引号，引号里面是字符串不会进行函数运算


